name: Release & Deploy

on:
  push:
    branches:
      - main

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      code-changed: ${{ steps.changes.outputs.code }}
      docs-only: ${{ steps.changes.outputs.docs-only }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Check for code changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            code:
              - 'resume-builder-ui/**'
              - 'app.py'
              - 'resume_generator*.py'
              - 'templates/**'
              - 'requirements.txt'
              - 'package*.json'
              - 'Dockerfile*'
              - '.github/workflows/**'
            docs-only:
              - '*.md'
              - 'docs/**'
              - 'LICENSE'
              - '.gitignore'

  test:
    name: Run Tests
    needs: changes
    if: needs.changes.outputs.code-changed == 'true'
    uses: ./.github/workflows/test.yml

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [changes, test]
    if: always() && (needs.test.result == 'success' || needs.changes.outputs.code-changed == 'false')
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install git-cliff
        uses: taiki-e/install-action@git-cliff

      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list
          sudo apt update && sudo apt install gh -y

      - name: Generate changelog and create release
        id: release
        run: |
          # Get current version
          CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Current version: $CURRENT_VERSION"
          
          # Check for conventional commits since last tag
          echo "Recent commits:"
          git log --oneline -5
          
          # Generate new version based on conventional commits
          NEW_VERSION=$(git cliff --bumped-version 2>/dev/null || echo "")
          echo "New version from git-cliff: '$NEW_VERSION'"
          
          if [ -z "$NEW_VERSION" ] || [ "$CURRENT_VERSION" = "$NEW_VERSION" ]; then
            echo "❌ No conventional commits found - no release created"
            echo "💡 Recent commits must follow format: 'feat:', 'fix:', 'docs:', etc."
            echo "released=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "New version: $NEW_VERSION"
          echo "released=true" >> $GITHUB_OUTPUT
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Generate changelog
          git cliff --tag "$NEW_VERSION" > CHANGELOG.md
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Commit changelog
          git add CHANGELOG.md
          git commit -m "chore(release): prepare for $NEW_VERSION"
          
          # Create and push tag
          git tag "$NEW_VERSION"
          git push origin main --tags
          
          # Generate release notes

          RELEASE_NOTES=$(git cliff --tag "$NEW_VERSION" --strip all | tail -n +3)
          
          # Create GitHub release
          echo "$RELEASE_NOTES" | gh release create "$NEW_VERSION" \
            --title "Release $NEW_VERSION" \
            --notes-file - \
            --latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build and Push
    needs: [changes, release]
    if: needs.release.outputs.released == 'true'
    uses: ./.github/workflows/build.yml
    with:
      version: ${{ needs.release.outputs.version }}
    secrets: inherit
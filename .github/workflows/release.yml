name: Release & Deploy

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type (auto uses conventional commits)'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - patch
          - minor
          - major
      release_notes:
        description: 'Additional release notes (optional)'
        required: false
        type: string
  push:
    branches:
      - 'hotfix/**'  # Auto-release for emergency hotfixes only

jobs:
  test:
    name: Frontend Tests
    uses: ./.github/workflows/test-reusable.yml

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: test
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install git-cliff
        uses: taiki-e/install-action@git-cliff

      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list
          sudo apt update && sudo apt install gh -y

      - name: Generate changelog and create release
        id: release
        run: |
          # Get current version
          CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Current version: $CURRENT_VERSION"
          
          # Check for conventional commits since last tag
          echo "Recent commits:"
          git log --oneline -10
          
          # Determine if this is a hotfix release
          IS_HOTFIX="${{ github.event_name == 'push' && startsWith(github.ref, 'refs/heads/hotfix/') }}"
          VERSION_BUMP="${{ github.event.inputs.version_bump || 'auto' }}"
          
          echo "Is hotfix: $IS_HOTFIX"
          echo "Version bump type: $VERSION_BUMP"
          
          # Generate new version
          if [ "$VERSION_BUMP" = "auto" ]; then
            # Use conventional commits to determine version
            NEW_VERSION=$(git cliff --bumped-version 2>/dev/null || echo "")
            echo "New version from git-cliff: '$NEW_VERSION'"
          else
            # Manual version bump
            if [ "$CURRENT_VERSION" = "v0.0.0" ]; then
              CURRENT_VERSION="0.0.0"
            else
              CURRENT_VERSION="${CURRENT_VERSION#v}"  # Remove 'v' prefix
            fi
            
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR=${VERSION_PARTS[0]:-0}
            MINOR=${VERSION_PARTS[1]:-0}
            PATCH=${VERSION_PARTS[2]:-0}
            
            case "$VERSION_BUMP" in
              "major") NEW_VERSION="v$((MAJOR + 1)).0.0" ;;
              "minor") NEW_VERSION="v$MAJOR.$((MINOR + 1)).0" ;;
              "patch") NEW_VERSION="v$MAJOR.$MINOR.$((PATCH + 1))" ;;
            esac
            echo "Manual version bump: $NEW_VERSION"
          fi
          
          # For manual releases, proceed even if no conventional commits found
          if [ -z "$NEW_VERSION" ] || [ "$CURRENT_VERSION" = "$NEW_VERSION" ]; then
            if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              # Force a patch release for manual triggers with no conventional commits
              if [ "$CURRENT_VERSION" = "v0.0.0" ]; then
                CURRENT_VERSION="0.0.0"
              else
                CURRENT_VERSION="${CURRENT_VERSION#v}"
              fi
              IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
              MAJOR=${VERSION_PARTS[0]:-0}
              MINOR=${VERSION_PARTS[1]:-0}
              PATCH=${VERSION_PARTS[2]:-0}
              NEW_VERSION="v$MAJOR.$MINOR.$((PATCH + 1))"
              echo "⚠️ No conventional commits found - creating patch release: $NEW_VERSION"
            else
              echo "❌ No conventional commits found - no release created"
              echo "💡 Recent commits must follow format: 'feat:', 'fix:', 'docs:', etc."
              echo "released=false" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
          
          echo "New version: $NEW_VERSION"
          echo "released=true" >> $GITHUB_OUTPUT
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Generate changelog
          git cliff --tag "$NEW_VERSION" > CHANGELOG.md
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Commit changelog
          git add CHANGELOG.md
          git commit -m "chore(release): prepare for $NEW_VERSION"
          
          # Create and push tag
          git tag "$NEW_VERSION"
          git push origin main --tags
          
          # Generate release notes
          RELEASE_NOTES=$(git cliff --tag "$NEW_VERSION" --strip all | tail -n +3)
          
          # Add manual release notes if provided
          ADDITIONAL_NOTES="${{ github.event.inputs.release_notes }}"
          if [ -n "$ADDITIONAL_NOTES" ]; then
            RELEASE_NOTES="$ADDITIONAL_NOTES

$RELEASE_NOTES"
          fi
          
          # Add hotfix label if this is a hotfix release
          if [ "$IS_HOTFIX" = "true" ]; then
            RELEASE_TITLE="🚨 Hotfix Release $NEW_VERSION"
          else
            RELEASE_TITLE="Release $NEW_VERSION"
          fi
          
          # Create GitHub release
          echo "$RELEASE_NOTES" | gh release create "$NEW_VERSION" \
            --title "$RELEASE_TITLE" \
            --notes-file - \
            --latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-deploy:
    name: Build and Deploy
    needs: release
    if: needs.release.outputs.released == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.release.outputs.tag }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: europe-west2-docker.pkg.dev/uk-vm-00001/resume-builder/easyfreeresume-app
          tags: |
            type=raw,value=${{ needs.release.outputs.version }}
            type=raw,value=latest

      - name: Authenticate with GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Configure Docker for GCP
        run: |
          echo '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}' | docker login -u _json_key_base64 --password-stdin europe-west2-docker.pkg.dev

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          load: true
          tags: |
            local-scan:latest
            scan-ready:${{ needs.release.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: false

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'local-scan:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'  # Don't fail the build on vulnerabilities, just report them

      - name: Display security scan summary
        if: always()
        run: |
          if [ -f trivy-results.sarif ]; then
            echo "🔍 **Security Scan Completed**" >> $GITHUB_STEP_SUMMARY
            echo "Scan results uploaded to GitHub Security tab" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Security Scan Failed**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Tag and push scanned image to registry
        if: success()
        run: |
          # Re-tag the scanned image with proper registry tags
          docker tag local-scan:latest europe-west2-docker.pkg.dev/uk-vm-00001/resume-builder/easyfreeresume-app:${{ needs.release.outputs.version }}
          docker tag local-scan:latest europe-west2-docker.pkg.dev/uk-vm-00001/resume-builder/easyfreeresume-app:latest
          
          # Push the exact same image that was scanned
          docker push europe-west2-docker.pkg.dev/uk-vm-00001/resume-builder/easyfreeresume-app:${{ needs.release.outputs.version }}
          docker push europe-west2-docker.pkg.dev/uk-vm-00001/resume-builder/easyfreeresume-app:latest
          
          echo "📦 **Image pushed to GCP Artifact Registry**" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:** ${{ needs.release.outputs.version }}, latest" >> $GITHUB_STEP_SUMMARY

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ secrets.GCP_CLOUD_RUN_SERVICE }}
          image: europe-west2-docker.pkg.dev/uk-vm-00001/resume-builder/easyfreeresume-app:${{ needs.release.outputs.version }}
          region: "europe-west2"
          flags: |
            --cpu=1
            --memory=1Gi
            --min-instances=0
            --max-instances=10
            --concurrency=80
            --timeout=300
            --allow-unauthenticated

      - name: Deployment Summary
        run: |
          echo "🚀 **Release ${{ needs.release.outputs.version }} Deployed Successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Service URL:** ${{ steps.deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** europe-west2-docker.pkg.dev/uk-vm-00001/resume-builder/easyfreeresume-app:${{ needs.release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** europe-west2" >> $GITHUB_STEP_SUMMARY